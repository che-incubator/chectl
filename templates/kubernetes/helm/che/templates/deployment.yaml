#
# Copyright (c) 2012-2018 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: che
  name: che
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: che
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: che
    spec:
      initContainers:
{{- if .Values.global.multiuser }}
      - name: wait-for-postgres
        image: alpine:3.5
        command: ["sh", "-c", "apk --no-cache add curl jq ; adresses_length=0; until [ $adresses_length -gt 0 ]; do echo waiting for postgres to be ready...; sleep 2; endpoints=`curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"     https://kubernetes.default/api/v1/namespaces/$POD_NAMESPACE/endpoints/postgres`; adresses_length=`echo $endpoints | jq -r \".subsets[]?.addresses // [] | length\"`; done;"]
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
{{- end }}
#wait for keycloak if in multiuser mode and .Values.customOidcProvider was not defined
{{- if (and .Values.global.multiuser (not .Values.customOidcProvider)) }}
      - name: wait-for-keycloak
        image: alpine:3.5
        command: ["sh", "-c", "apk --no-cache add curl jq ; adresses_length=0; until [ $adresses_length -gt 0 ]; do echo waiting for keycloak to be ready...; sleep 2; endpoints=`curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"     https://kubernetes.default/api/v1/namespaces/$POD_NAMESPACE/endpoints/keycloak`; adresses_length=`echo $endpoints | jq -r \".subsets[]?.addresses // [] | length\"`; done;"]
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
{{- end }}
{{- if not .Values.global.multiuser }}
      - name: fmp-volume-permission
        image: busybox
        command: ["chmod", "777", "/data"]
        volumeMounts: [{
              "mountPath": "/data",
              "name": "che-data-volume"
        }]
{{- end }}
      containers:
      - envFrom:
        - configMapRef:
            name: che
        env:
        - name: OPENSHIFT_KUBE_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{ .Values.cheImage }}
        imagePullPolicy: {{ .Values.cheImagePullPolicy }}
        livenessProbe:
          httpGet:
            path: /api/system/state
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
          timeoutSeconds: 10
        name: che
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8000
          name: http-debug
        - containerPort: 8888
          name: jgroups-ping
        - containerPort: 8087
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /api/system/state
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          timeoutSeconds: 60
        resources:
          limits:
            memory: 600Mi
          requests:
            memory: 256Mi
{{- if not .Values.global.multiuser }}
        volumeMounts:
        - mountPath: /data
          name: che-data-volume
      volumes:
      - name: che-data-volume
        persistentVolumeClaim:
          claimName: che-data-volume
{{- end }}
{{- if .Values.registry }}
{{- if and .Values.registry.password .Values.registry.username }}
      imagePullSecrets:
        - name: registry-pull-secret
{{- end }}
{{- end }}
      serviceAccountName: che
